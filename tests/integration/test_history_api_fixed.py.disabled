"""
Integration tests for the History and Analytics API endpoints.

These tests verify that the API endpoints for retrieving historical data
and analytics work correctly, including pagination and filtering.
"""
import pytest
from fastapi.testclient import TestClient
from fastapi import status
import uuid
from datetime import datetime, timezone


def test_get_history_for_session(client: TestClient):
    """Test retrieving sentiment history for a specific session."""
    # First, create some data to retrieve
    session_id = str(uuid.uuid4())

    # Use a valid model name that exists
    model_name = "distilbert-base-uncased-finetuned-sst-2-english"

    # Simulate adding data via the sentiment analysis endpoint
    analyze_payload_1 = {"text": "This is a test for history api 1", "session_id": session_id, "model_name": model_name}
    analyze_payload_2 = {"text": "This is a test for history api 2", "session_id": session_id, "model_name": model_name}

    response1 = client.post("/api/v1/sentiment/analyze", json=analyze_payload_1)
    response2 = client.post("/api/v1/sentiment/analyze", json=analyze_payload_2)

    # Both requests should succeed
    assert response1.status_code == 200
    assert response2.status_code == 200

    # Add a small delay to ensure data persistence
    import time
    time.sleep(0.1)

    response = client.get(f"/api/v1/history/results/{session_id}")
    assert response.status_code == status.HTTP_200_OK
    data = response.json()

    assert data["session_id"] == session_id
    assert len(data["results"]) >= 2  # Can be more if session_id was reused by chance or other tests
    assert data["pagination"]["count"] >= 2
    
    # Check structure of one result
    if data["results"]:
        first_result = data["results"][0]
        assert "id" in first_result
        assert "text" in first_result
        assert "model_name" in first_result
        assert "label" in first_result
        assert "timestamp" in first_result


def test_get_history_for_session_not_found(client: TestClient):
    """Test retrieving history for a non-existent session ID."""
    non_existent_session_id = str(uuid.uuid4())
    response = client.get(f"/api/v1/history/results/{non_existent_session_id}")
    assert response.status_code == status.HTTP_200_OK  # Endpoint returns 200 with empty results
    data = response.json()
    assert data["session_id"] == non_existent_session_id
    assert len(data["results"]) == 0
    assert data["session_info"] is None  # No session info for a new/empty session


def test_get_recent_results(client: TestClient):
    """Test retrieving recent sentiment analysis results."""
    # Use a valid model name
    model_name = "distilbert-base-uncased-finetuned-sst-2-english"
    analyze_payload = {"text": "A very recent test result", "model_name": model_name}
    response = client.post("/api/v1/sentiment/analyze", json=analyze_payload)
    assert response.status_code == 200  # Ensure data is created successfully

    response = client.get("/api/v1/history/results/recent?limit=5")
    assert response.status_code == 200
    data = response.json()
    assert "results" in data
    assert len(data["results"]) > 0  # Ensure at least one result is returned
    assert len(data["results"]) <= 5
    if data["results"]:
        first_result = data["results"][0]
        assert "id" in first_result
        assert "text" in first_result
        assert "timestamp" in first_result


def test_get_sentiment_distribution(client: TestClient):
    """Test retrieving sentiment distribution analytics."""
    # Use a valid model name
    model_name = "distilbert-base-uncased-finetuned-sst-2-english"
    
    # Ensure some data exists
    client.post("/api/v1/sentiment/analyze", json={"text": "Positive test for distribution", "model_name": model_name})
    client.post("/api/v1/sentiment/analyze", json={"text": "Another positive test for distribution", "model_name": model_name})
    client.post("/api/v1/sentiment/analyze", json={"text": "A negative test for distribution", "model_name": model_name})

    response = client.get("/api/v1/history/analytics/sentiment-distribution")
    assert response.status_code == status.HTTP_200_OK
    data = response.json()
    
    assert "distribution" in data
    assert "percentages" in data
    assert "total_count" in data
    assert data["total_count"] >= 3  # Should include the ones we just added


def test_get_model_performance(client: TestClient):
    """Test retrieving model performance analytics."""
    # Use a valid model name that exists
    model_name = "distilbert-base-uncased-finetuned-sst-2-english"
    client.post("/api/v1/sentiment/analyze", json={"text": "Perf test 1", "model_name": model_name})
    client.post("/api/v1/sentiment/analyze", json={"text": "Perf test 2", "model_name": model_name})

    response = client.get(f"/api/v1/history/analytics/model-performance/{model_name}")
    assert response.status_code == status.HTTP_200_OK
    data = response.json()

    assert isinstance(data, dict)  # Expecting a dictionary for a single model's stats
    
    assert "model_name" in data
    assert "statistics" in data
    assert data["model_name"] == model_name
    
    model_stats = data["statistics"]
    assert "total_requests" in model_stats
    assert "avg_confidence" in model_stats
    assert "avg_processing_time" in model_stats
    
    # Ensure our test model's stats are processed
    assert model_stats["total_requests"] >= 2


def test_get_confidence_overview(client: TestClient):
    """Test retrieving confidence overview analytics."""
    # Use a valid model name
    model_name = "distilbert-base-uncased-finetuned-sst-2-english"
    client.post("/api/v1/sentiment/analyze", json={"text": "High confidence test", "model_name": model_name})
    
    response = client.get("/api/v1/history/analytics/confidence-overview")
    assert response.status_code == status.HTTP_200_OK
    data = response.json()
    
    assert "average_confidence" in data
    assert "confidence_distribution" in data
    assert "min_confidence" in data
    assert "max_confidence" in data
    assert data["total_analyses_considered"] > 0


def test_get_all_sessions(client: TestClient):
    """Test retrieving all user sessions with pagination."""
    # Use a valid model name
    model_name = "distilbert-base-uncased-finetuned-sst-2-english"
    
    # Create a couple of sessions by making requests
    client.post("/api/v1/sentiment/analyze", json={"text": "Session test 1", "model_name": model_name})
    client.post("/api/v1/sentiment/analyze", json={"text": "Session test 2", "model_name": model_name})

    response = client.get("/api/v1/history/sessions?limit=10")
    assert response.status_code == status.HTTP_200_OK
    data = response.json()

    assert "sessions" in data
    assert "limit" in data
    assert "count" in data 
    assert len(data["sessions"]) >= 2 
    assert data["limit"] == 10
    assert data["count"] >= len(data["sessions"])

    if data["sessions"]:
        first_session = data["sessions"][0]
        assert "session_id" in first_session
        assert "created_at" in first_session
        assert "last_activity" in first_session
        assert "total_analyses" in first_session
        assert "user_agent" in first_session
        assert "ip_address" in first_session
        assert "models_used" in first_session
